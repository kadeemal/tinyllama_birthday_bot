from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from bot.keyboards.start_buttons import get_start_buttons
from aiogram.filters import or_f
import datetime
import aiosqlite


router = Router()
help_text = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>  

–Ø —É–º–µ—é –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –î–Ω—è—Ö –†–æ–∂–¥–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É—é –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.  

<u>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</u>  

/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞  

/add_date - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É

/remove_date - –£–¥–∞–ª–∏—Ç—å –∏–º–µ—é—â—É—é—Å—è –¥–∞—Ç—É

/show_dates - –ü–æ–∫–∞–∑–∞—Ç—å –∏–º–µ—é—â–∏–µ—Å—è –¥–∞—Ç—ã

/generate_wish - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å

/help - –í—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º  

–ü–æ–¥—Å–∫–∞–∑–∫–∞:
–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞—Ç: "–¥–¥.–º–º"
–ù–∞–ø—Ä–∏–º–µ—Ä,
7 –Ω–æ—è–±—Ä—è = 07.11,
11 –º–∞—Ä—Ç–∞ = 11.03
"""


@router.message(Command('start'))
async def start(message: Message, state: FSMContext):
    async with aiosqlite.connect("./bot.db") as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, chat_id, last_generation) VALUES (?, ?, ?)",
            (message.from_user.id, message.chat.id, datetime.datetime(2000, 1, 1).isoformat())
        )
        await db.execute(
            f"""
            CREATE TABLE IF NOT EXISTS user_{message.from_user.id} (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT,
                name TEXT,
                UNIQUE(date, name)
            )
            """
        )
        await db.commit()
    await message.answer(help_text, parse_mode="HTML")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=get_start_buttons()
    )
    await state.clear()


@router.message(or_f(
    Command('help'),
    F.text.lower() == '–ø–æ–º–æ—â—å'
))
async def generate_wish(message: Message):
    await message.answer(help_text, parse_mode="HTML")
